version: '3'
services:
    zookeeper:
        image: docker.io/bitnami/zookeeper:3.8
        container_name: zookeeper
        ports:
            - '2181:2181'
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes

    kafka:
        image: docker.io/bitnami/kafka:3.4
        container_name: kafka
        ports:
            - '9093:9093'
        environment:
            - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_ADVERTISED_LISTENERS=INSIDE://:9092,OUTSIDE://:9093
            - KAFKA_CFG_LISTENERS=INSIDE://:9092,OUTSIDE://:9093
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
            - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INSIDE
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper

    postgres:
        image: docker.io/bitnami/postgresql:16
        container_name: postgres
        hostname: postgres
        environment:
            - POSTGRESQL_USERNAME=postgres
            - POSTGRESQL_PASSWORD=postgres
            - POSTGRESQL_DATABASE=postgres
            - POSTGRESQL_OTHER_DATABASES=airflow
            - POSTGRESQL_REPLICATION_MODE=master
            - POSTGRESQL_REPLICATION_USER=repl_user
            - POSTGRESQL_REPLICATION_PASSWORD=repl_password
            - POSTGRESQL_LOG_CONNECTIONS=true
        ports:
            - '5432:5432'
        volumes:
            - ./volumes/postgres:/docker-entrypoint-initdb.d

    postgres-slave:
        image: docker.io/bitnami/postgresql:16
        container_name: postgres-slave
        restart: on-failure:5
        environment:
            - POSTGRESQL_PASSWORD=postgres
            - POSTGRESQL_MASTER_HOST=postgres
            - POSTGRESQL_MASTER_PORT_NUMBER=5432
            - POSTGRESQL_REPLICATION_MODE=slave
            - POSTGRESQL_REPLICATION_USER=repl_user
            - POSTGRESQL_REPLICATION_PASSWORD=repl_password
            - POSTGRESQL_LOG_CONNECTIONS=true
            # - POSTGRESQL_PGAUDIT_LOG=READ
        ports:
            - '5433:5432'
        depends_on:
            - postgres

    0xweb:
        build:
            context: ./container/0xweb/
        command: python /opt/0xweb/fetch_price.py
        container_name: 0xweb
        restart: on-failure:5
        volumes:
            - ./volumes/0xweb:/opt/0xweb
        depends_on:
            - postgres
            - kafka

    ethereumetl:
        build:
            context: ./container/ethereumetl/
        command: python /opt/ethereumetl/stream.py
        container_name: ethereumetl
        restart: on-failure:5
        volumes:
            - ./volumes/ethereumetl:/opt/ethereumetl
        depends_on:
            - postgres
            - kafka
